import debugModule from 'debug'
import express from 'express'
import methodOverride from 'method-override'
import cookieParser from 'cookie-parser'
import helmet from 'helmet';
import { setGQL } from './graphql';
import sessionParser from 'express-session'
import path from 'path';
import { setRouter } from './router';
import { setSchedule } from './schedule';
import http from 'http'
import { ApolloServer, gql } from 'apollo-server-express';

const debug = debugModule('app:server');

export function CreateServer(){
    return new Promise<void>((resolve, reject)=>{
        const app = express();
        
        // app.set('views', path.join(process.cwd(), 'public', 'views'))
        
        app.use(express.json({ limit: '1mb' }))
        app.use(express.urlencoded({ extended: false, limit: '1mb' }))
        
        app.use(methodOverride()) // HTTP 요청 메소드 오버라이드 (delete, put 도 가능)
        app.use(cookieParser('1234567890abcdefghijklmnopqrstuvwxyz')); // req.cookie 가능
        app.use(helmet());// 보안 헤더 설정
        
        
        /** gql setting start ******************************************/
        // setGQL(app);
        const typeDefs = gql`
        type Query {
            hello: String
            books: [Book]
        }

        type Mutation {
            addBook(title: String, author: String): Book
        }

        type Book {
            title: String
            author: String
        }
        `;

        let books = [
            { title: 'The Awakening', author: 'Kate Chopin' },
            { title: 'City of Glass', author: 'Paul Auster' }
        ];

        const resolvers = {
            Query: {
                hello: () => 'Hello world!',
                books: () => books,
            },
            Mutation: {
                addBook: (_: any, { title, author }: any) => {
                    const newBook = { title, author };
                    books.push(newBook);
                    return newBook;
                }
            }
        };

        // async function startServer(typeDefs: any, resolvers: any, app:any) {
        //     // const app = express();
        //     const server = new ApolloServer({ typeDefs, resolvers });
          
        //     await server.start();
        //     server.applyMiddleware({ app });
          
        //     // app.use((req, res) => {
        //     //   res.status(200);
        //     //   res.send('Hello!');
        //     //   res.end();
        //     // });
          
        //     // const PORT = 4000;
        //     // app.listen(PORT, () => {
        //     //   console.log(`Server is running at http://localhost:${PORT}${server.graphqlPath}`);
        //     // });
        //     return app;
        //   }
        
        // startServer(typeDefs, resolvers, app);

        const server = new ApolloServer({ typeDefs, resolvers });
          
        server.start();
        server.applyMiddleware({ app });
        



        /** gql setting end ******************************************/


        app.use(sessionParser({
            secret: 'secret code',
            resave: true,
            saveUninitialized: true
        })) // req.session 가능
        
        app.use(express.static(path.join(process.cwd(), 'dist'))) // frontend
        
        // app.use('/', express.static(path.join(process.cwd(), '_static'), { maxAge: 0 })) 
        // app.use('/', express.static(path.join(process.cwd(), 'public', 'assets'), { maxAge: 60 * 60 * 1000 })) 
        // app.use('/vendors', express.static(path.join(process.cwd(), 'public', 'vendors'), { maxAge: 60 * 60 * 1000 })) 
        
        setRouter(app);
        setSchedule();
        
        console.log(process.env.NODE_STAGE)
        
        const PORT = 4432;
        app.listen(PORT, () => {
          console.log(`Server is running at http://localhost:${PORT}`);
        })

        // let port = 3333;
        
        // const httpServer = http.createServer(app);
        // httpServer.listen(port, () => {
        //     debug(`server started at ${port}`)
        //     return resolve();
        // })
        
    })
}